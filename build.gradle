def className = "PhoenixGame"
def programVersion = "0.0.1"
def codeName = "pre-alpha"
def mainClassPath = "games.absolutephoenix"
def packageName = className.toLowerCase()
def versionFileName = "Reference.java"
def versionJavaFile = "src/main/java/games/absolutephoenix/$packageName/reference/$versionFileName"
def tmpDir = "build/tmp/sourcesCache"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

group = "games.absolutephoenix"
archivesBaseName = className
version = programVersion + '-' + codeName


sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'
    compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.14'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'
    compile group: 'org.json', name: 'json', version: '20201115'
    compile group: 'junit', name: 'junit', version: '4.13.1'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile group: 'org.jetbrains', name: 'annotations', version: '16.0.1'

}

jar{
    manifest{
        attributes("Main-Class":"$mainClassPath.$packageName.$className")
    }
}

compileJava.doFirst {
    copy{
        from{versionJavaFile}
        into(tmpDir)
    }
    ant.replace(file: versionJavaFile, token: '@VERSION@', value: version)
}

compileJava.doLast {
    copy{
        from(tmpDir + '/' + versionFileName)
        into(project.file(versionJavaFile).parent)
    }
}

if(JavaVersion.current().isJava8Compatible())
{
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclient.none', '-quiet')
    }
}

shadowJar{
    destinationDir = file(new File("$projectDir/../Compiled Software/Java"))
    baseName = "$className-$programVersion-$codeName"
    appendix = null
    classifier = null
    version = null
    extension = "jar"

    dependencies{
    }
}

build.dependsOn(shadowJar)
